[
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Explore my tutorials on data science and programming:\n\nTutorial 1\nTutorial 2"
  },
  {
    "objectID": "Tutorials/tutorial1.html",
    "href": "Tutorials/tutorial1.html",
    "title": "Inroduction to R",
    "section": "",
    "text": "Introduction to R\nR is a programming language and software environment primarily used for statistical computing, data analysis, and graphical representation. It was developed as an open-source alternative to the S language.\nPioneers of R\nCreators: R was created by Ross Ihaka and Robert Gentleman, two statisticians from the University of Auckland, New Zealand.\nR was first released in 1993, with its stable version 1.0.0 coming out in 2000. It was inspired by the S programming language, developed by John Chambers at Bell Labs.\nR was created to provide a free, open-source platform for statisticians, data analysts, and researchers to perform statistical analysis, manipulate data, and create visualizations. Its purpose is to make it easier to apply complex statistical methods and work with large data sets.\n\nCode# Load the gt package\nlibrary(gt)\n\n# Create the data for the table\ncomparison &lt;- data.frame(\n  Feature = c(\"Primary Use\", \"Learning Curve\", \"Cost\", \"Community & Libraries\", \n              \"Data Visualization\", \"Speed & Efficiency\", \"Integration\", \"Scalability\"),\n  R = c(\"Statistical computing, data analysis, and visualization\",\n        \"Steep for beginners, especially for those unfamiliar with statistical concepts\",\n        \"Free and open source\", \n        \"Large, focused on statistics, 18,000+ packages\",\n        \"Excellent (with `ggplot2`, `plotly`, etc.)\",\n        \"Slower, memory-intensive\",\n        \"Excellent (interfaces with Python, C++, SQL)\",\n        \"Limited in enterprise or high-performance settings\"),\n  Python = c(\"General-purpose programming, data analysis, machine learning\",\n             \"Easier for beginners due to simpler syntax and versatility\",\n             \"Free (for basic use, with libraries)\",\n             \"Huge, versatile, with over 450,000 packages\",\n             \"Good (with `matplotlib`, `seaborn`, `plotly`)\",\n             \"Faster, more efficient for large datasets\",\n             \"Excellent (integrates with R, Java, C++)\",\n             \"Highly scalable, used widely in production environments\"),\n  SAS = c(\"Statistical analysis and business intelligence\",\n          \"Steep but well-supported for statistical analysis\",\n          \"Expensive commercial license\",\n          \"Specialized community, closed source\",\n          \"Limited compared to R\",\n          \"Fast, optimized for statistical procedures\",\n          \"Limited to SAS ecosystem\",\n          \"Well-suited for large-scale applications in business\"),\n  MATLAB = c(\"Numerical computing, engineering, and data analysis\",\n             \"Steep, especially for advanced mathematical operations\",\n             \"Expensive commercial license\",\n             \"Focused academic and engineering community\",\n             \"Good, though not as intuitive as R\",\n             \"Optimized for matrix operations but slower for general programming\",\n             \"Can integrate with Python, R, C++, but requires MATLAB-specific licenses\",\n             \"Can be scaled with MATLAB Parallel Server\")\n)\n\n# Generate the table using gt\ngt_table &lt;- gt(comparison, rowname_col = \"Feature\") %&gt;%\n  tab_header(\n    title = \"Comparison between R, Python, SAS, and MATLAB\"\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\") # Set the header text to bold\n    ),\n    locations = cells_column_labels(everything()) # Apply style to all column headers\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\", color = \"blue\") # Set the row names text to bold\n    ),\n    locations = cells_stub() # Apply style to the row names (stub)\n  )\n\n# Render the table\ngt_table\n\n\n\n\n\n\n\nComparison between R, Python, SAS, and MATLAB\n    \n\n\n      R\n      Python\n      SAS\n      MATLAB\n    \n\n\n\nPrimary Use\nStatistical computing, data analysis, and visualization\nGeneral-purpose programming, data analysis, machine learning\nStatistical analysis and business intelligence\nNumerical computing, engineering, and data analysis\n\n\nLearning Curve\nSteep for beginners, especially for those unfamiliar with statistical concepts\nEasier for beginners due to simpler syntax and versatility\nSteep but well-supported for statistical analysis\nSteep, especially for advanced mathematical operations\n\n\nCost\nFree and open source\nFree (for basic use, with libraries)\nExpensive commercial license\nExpensive commercial license\n\n\nCommunity & Libraries\nLarge, focused on statistics, 18,000+ packages\nHuge, versatile, with over 450,000 packages\nSpecialized community, closed source\nFocused academic and engineering community\n\n\nData Visualization\nExcellent (with `ggplot2`, `plotly`, etc.)\nGood (with `matplotlib`, `seaborn`, `plotly`)\nLimited compared to R\nGood, though not as intuitive as R\n\n\nSpeed & Efficiency\nSlower, memory-intensive\nFaster, more efficient for large datasets\nFast, optimized for statistical procedures\nOptimized for matrix operations but slower for general programming\n\n\nIntegration\nExcellent (interfaces with Python, C++, SQL)\nExcellent (integrates with R, Java, C++)\nLimited to SAS ecosystem\nCan integrate with Python, R, C++, but requires MATLAB-specific licenses\n\n\nScalability\nLimited in enterprise or high-performance settings\nHighly scalable, used widely in production environments\nWell-suited for large-scale applications in business\nCan be scaled with MATLAB Parallel Server\n\n\n\n\n\n\nAdvantages of R\n\nOpen Source: R is free to use, modify, and distribute, which makes it accessible to everyone.\nComprehensive Statistical Packages: R has over 18,000 packages (available on CRAN) covering a wide range of statistical and machine learning techniques, making it a go-to tool for statisticians and data scientists.\nPowerful Data Visualization: R excels in data visualization with libraries like ggplot2, plotly, and shiny, allowing users to create high-quality plots and interactive web apps.\nActive Community: R has a large, supportive user community and strong contributions from statisticians and data scientists worldwide. The R user community regularly contributes new packages and offers extensive help through forums and mailing lists.\nCross-platform Compatibility: R works on various operating systems, including Windows, macOS, and Linux.\nIntegration with Other Languages: R can interface with other languages like Python, C++, and Java, making it more flexible in projects that require multiple programming environments.\nDisadvantages of R\n\nSlow Execution: R is an interpreted language, and sometimes it runs slower than compiled languages like C++ or Java, especially when handling large datasets or complex operations.\nSteep Learning Curve: R’s syntax and object-oriented structure can be difficult to master for beginners. Concepts like data frames, functions, and vectorization are key parts of the language, but not always intuitive to new users.\nMemory Usage: R processes all objects in-memory, which can be limiting when dealing with very large datasets. Unlike languages like Python or SQL, which can handle out-of-memory computations more efficiently, R struggles with memory optimization.\nPoor Scalability: R isn’t the best choice for production environments or enterprise applications due to its lack of scalability in handling massive, high-frequency data.\nLess User-Friendly for Some Tasks: Some tasks, especially general-purpose programming, can be cumbersome in R compared to more general languages like Python or JavaScript.\nComparison Highlights:\n\nR vs Python: Both are popular in data science, but Python is more versatile as a general-purpose language. R has an edge in statistical analysis and data visualization, while Python excels in machine learning and web development.\nR vs SAS: SAS is widely used in the corporate world for business intelligence and statistical analysis but is expensive. R is free and flexible but not as supported in large enterprise environments.\n\n-R vs MATLAB: MATLAB is more commonly used in engineering and numerical computing, whereas R is preferred for statistics. MATLAB is expensive, while R is free and open-source.\nSummary\nR is a powerful tool for statistical computing and visualization, with a vast ecosystem of packages tailored for data analysis and research. While it has some limitations in terms of speed, memory usage, and scalability, its extensive statistical functions and strong community make it a preferred choice in academic and research settings.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Remember, learning never ends. In here, we have some very resources platforms or materials that we can always consult or learning something new from:\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Here are some of the projects I’ve worked on:\n\nProject 1\nProject 2"
  },
  {
    "objectID": "Projects/project1.html",
    "href": "Projects/project1.html",
    "title": "Project 1",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "posts/R Repository.html",
    "href": "posts/R Repository.html",
    "title": "R Repository",
    "section": "",
    "text": "What is a repository?\nIn the language of programmers, a repository (in short, repo) is a central location where code, files, and related project data are stored and managed. It is typically used for version control and collaboration, allowing developers to track changes, share work, and maintain codebases effectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Introducing R.html",
    "href": "posts/Introducing R.html",
    "title": "About R",
    "section": "",
    "text": "1 Introduction to R\nR is a programming language and software environment primarily used for statistical computing, data analysis, and graphical representation. It was developed as an open-source alternative to the S language.\n\n2 Pioneers of R\nCreators: R was created by Ross Ihaka and Robert Gentleman, two statisticians from the University of Auckland, New Zealand.\nR was first released in 1993, with its stable version 1.0.0 coming out on the 29th February, 2000. It was inspired by the S programming language, developed by John Chambers at Bell Labs.\n\n3 Why use R\nWell, I would recommend using r for endless reasons, especially those involved in Data Science, Statistics and Academic Research. Below are a few of them:\n\nExtensive Package Ecosystem for Statistical Methods. R’s package ecosystem is vast and includes highly specialized libraries that cater to advanced statistical needs. Packages like caret, tidymodels, and lme4 enable advanced modeling, while shiny allows for building interactive web apps for data visualization.\nR is free because it is an open source software. You can have it downloaded immediately and it will run on any workstation platform you are likey to use. Because of its free nature, R is a rival to all commercial statistical packages (Howard 2011).\nR is used by most data scientists in the world. It is the second most used programming language in data science after Python.\nR is powerful because of the breadth of techniques it offers in thrid-party packages. Any technique that you can tink of for data analysis, visualisation, data sampling, supervised machine learning, and model evaluation, are all provided in R.\nR is state-of-the-art because it is used by academics. One of the reasons why R has so many techniques is because academics who develop new algorithms are developing them in R and releasing them as R packages. This means that you can get access to state-of-the-art algorithms in R before other platforms. It also means that you can only access some algorithms in R until someone ports them to other platforms. R was created to provide a free, open-source platform for statisticians, data analysts, and researchers to perform statistical analysis, manipulate data, and create visualizations. Its purpose is to make it easier to apply complex statistical methods and work with large data sets.\n\n\nHoward, James P. 2011. R Cookbook . Vol. 40. Book Review 3. https://doi.org/10.18637/jss.v040.b03.\n\n\n\n\n\n\n\n\nComparison between R, Python, SAS, and MATLAB\n    \n\n\n      R\n      Python\n      SAS\n      MATLAB\n    \n\n\n\nPrimary Use\nStatistical computing, data analysis, and visualization\nGeneral-purpose programming, data analysis, machine learning\nStatistical analysis and business intelligence\nNumerical computing, engineering, and data analysis\n\n\nLearning Curve\nSteep for beginners, especially for those unfamiliar with statistical concepts\nEasier for beginners due to simpler syntax and versatility\nSteep but well-supported for statistical analysis\nSteep, especially for advanced mathematical operations\n\n\nCost\nFree and open source\nFree (for basic use, with libraries)\nExpensive commercial license\nExpensive commercial license\n\n\nCommunity & Libraries\nLarge, focused on statistics, 18,000+ packages\nHuge, versatile, with over 450,000 packages\nSpecialized community, closed source\nFocused academic and engineering community\n\n\nData Visualization\nExcellent (with ggplot2, plotly, etc.)\nGood (with `matplotlib`, `seaborn`, `plotly`)\nLimited compared to R\nGood, though not as intuitive as R\n\n\nSpeed & Efficiency\nSlower, memory-intensive\nFaster, more efficient for large datasets\nFast, optimized for statistical procedures\nOptimized for matrix operations but slower for general programming\n\n\nIntegration\nExcellent (interfaces with Python, C++, SQL)\nExcellent (integrates with R, Java, C++)\nLimited to SAS ecosystem\nCan integrate with Python, R, C++, but requires MATLAB-specific licenses\n\n\nScalability\nLimited in enterprise or high-performance settings\nHighly scalable, used widely in production environments\nWell-suited for large-scale applications in business\nCan be scaled with MATLAB Parallel Server\n\n\n\n\n\n\n\n4 Advantages of R\n\nOpen Source: R is free to use, modify, and distribute, which makes it accessible to everyone.\nComprehensive Statistical Packages: R has over 18,000 packages (available on CRAN) covering a wide range of statistical and machine learning techniques, making it a go-to tool for statisticians and data scientists.\nPowerful Data Visualization: R excels in data visualization with libraries like ggplot2, plotly, and shiny, allowing users to create high-quality plots and interactive web apps.\nActive Community: R has a large, supportive user community and strong contributions from statisticians and data scientists worldwide. The R user community regularly contributes new packages and offers extensive help through forums and mailing lists.\nCross-platform Compatibility: R works on various operating systems, including Windows, macOS, and Linux.\nIntegration with Other Languages: R can interface with other languages like Python, C++, and Java, making it more flexible in projects that require multiple programming environments.\n\n5 Disadvantages of R\n\nSlow Execution: R is an interpreted language, and sometimes it runs slower than compiled languages like C++ or Java, especially when handling large datasets or complex operations.\nSteep Learning Curve: R’s syntax and object-oriented structure can be difficult to master for beginners. Concepts like data frames, functions, and vectorization are key parts of the language, but not always intuitive to new users.\nMemory Usage: R processes all objects in-memory, which can be limiting when dealing with very large datasets. Unlike languages like Python or SQL, which can handle out-of-memory computations more efficiently, R struggles with memory optimization.\nPoor Scalability: R isn’t the best choice for production environments or enterprise applications due to its lack of scalability in handling massive, high-frequency data.\nLess User-Friendly for Some Tasks: Some tasks, especially general-purpose programming, can be cumbersome in R compared to more general languages like Python or JavaScript.\n\n6 Comparison Highlights:\n\nR vs Python: Both are popular in data science, but Python is more versatile as a general-purpose language. R has an edge in statistical analysis and data visualization, while Python excels in machine learning and web development.\nR vs SAS: SAS is widely used in the corporate world for business intelligence and statistical analysis but is expensive. R is free and flexible but not as supported in large enterprise environments.\nR vs MATLAB: MATLAB is more commonly used in engineering and numerical computing, whereas R is preferred for statistics. MATLAB is expensive, while R is free and open-source.\n\n7 Conclusion\nR is a powerful tool for statistical computing and visualization, with a vast ecosystem of packages tailored for data analysis and research. While it has some limitations in terms of speed, memory usage, and scalability, its extensive statistical functions and strong community make it a preferred choice in academic and research settings."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Welcome to my blog. Here are my recent posts:\n\nIntroducing R\nR packages\nR Repository\nWays_of_viewing_data_in_R\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 5, 2024\n\n\nAbout R\n\n\nSangbaptist \n\n\n\n\nOct 1, 2023\n\n\nR packages\n\n\nSangbaptist \n\n\n\n\nOct 1, 2023\n\n\nR Repository\n\n\nSangbaptist \n\n\n\n\nOct 1, 2023\n\n\nWays of viewing data in R\n\n\nSangbaptist \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sang B. Mendy",
    "section": "",
    "text": "Hello and welcome to my website! I’m Sang B. Mendy, a passionate data enthusiast with a deep interest in statistics, data analysis, and machine learning. I hold a Bachelor’s degree in Mathematics, and I’m currently pursuing a Master’s degree in Data Science and Statistics at the University of The Gambia. My journey into the world of data has been driven by a fascination with numbers, patterns, and the power of data-driven decision-making.\nWith a strong foundation in mathematical theory and its practical applications, I specialize in leveraging statistical techniques and machine learning algorithms to solve real-world problems. My academic background, combined with my expertise in software tools like R, MS Excel, and Python, has allowed me to work on a range of projects—from exploratory data analysis to predictive modeling.\nBeyond my technical skills, I value critical thinking, collaboration, and effective communication. I believe that the best results come from working together and sharing knowledge, which is why I started this website. Here, I share insights on data science, machine learning, and statistics, along with practical guides on using tools like R and Python."
  },
  {
    "objectID": "posts/R packages.html",
    "href": "posts/R packages.html",
    "title": "R packages",
    "section": "",
    "text": "An R package is a collection of functions, data and compiled code that is bundled together in a standardized way to extend the functionality of R. In R, packages allow users to document, share and reuse codes.\nI would recommend these books on R packages: Hadley Wickham & Jennifer Bryian and Hadley Wickham.\n\n\n\ntidyverse: This is a collection of some R packages designed to make data analysis easier, efficient and more intuitive.\ncaret: Short for Classification and REgression Training provides uniform interfaces for creating predictive models in R, with tools for data splitting, pre-processing, feature selection, model tuning and many more.\nggplot2: It is primarily for data visualization, offering a flexible and structured approach to creating static and dynamic plots.Rnews\nshiny: Shiny is designed for building interactive web applications that allow users to interact with data in real-time, without the need for advanced web programming knowledge."
  },
  {
    "objectID": "posts/R packages.html#examples-packages-in-r-are",
    "href": "posts/R packages.html#examples-packages-in-r-are",
    "title": "R packages",
    "section": "",
    "text": "tidyverse: This is a collection of some R packages designed to make data analysis easier, efficient and more intuitive.\ncaret: Short for Classification and REgression Training provides uniform interfaces for creating predictive models in R, with tools for data splitting, pre-processing, feature selection, model tuning and many more.\nggplot2: It is primarily for data visualization, offering a flexible and structured approach to creating static and dynamic plots.Rnews\nshiny: Shiny is designed for building interactive web applications that allow users to interact with data in real-time, without the need for advanced web programming knowledge."
  },
  {
    "objectID": "posts/Ways_of_viewing_data_in_R.html",
    "href": "posts/Ways_of_viewing_data_in_R.html",
    "title": "Ways of viewing data in R",
    "section": "",
    "text": "Twenty (20) plus ways of viewing data in R\nWhen data is loading into R,\n\n\nView entire dataset\n\n\nHead and tail of the dataset\n\n\nView the structure of the dataset\n\n\nDimensions (number of rows & columns) of the dataset\n\n\nView column names\n\n\nView the data type of each column\n\n\nView the first 5 row of a particular column\n\n\nView specific rows or columns\n\n\nGet a summary of your dataset\n\n\nPeek at the top and bottom of each column with skimr pacakge\n\n\nCheck data type of columns with sapply function\n\n\nInspect the first few rows of a dataframe withglimpse from dyplyr package\n\n\nView uniques values in a data frame with unique function\n\n\nView frequency of each value with table function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Projects/project2.html",
    "href": "Projects/project2.html",
    "title": "Project 2",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "Resources/index.html",
    "href": "Resources/index.html",
    "title": "Learning Resources",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "Tutorials/tutorial2.html",
    "href": "Tutorials/tutorial2.html",
    "title": "Tutorial 2",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "Statistics With R.html",
    "href": "Statistics With R.html",
    "title": "Stat",
    "section": "",
    "text": "Explore my tutorials on data science and programming:\n\nStatistical Distributions\nTutorial 2"
  },
  {
    "objectID": "Statistics With R/Statistical_Distributions.html",
    "href": "Statistics With R/Statistical_Distributions.html",
    "title": "Inroduction to R",
    "section": "",
    "text": "Introduction to R\nR is a programming language and software environment primarily used for statistical computing, data analysis, and graphical representation. It was developed as an open-source alternative to the S language.\nPioneers of R\nCreators: R was created by Ross Ihaka and Robert Gentleman, two statisticians from the University of Auckland, New Zealand.\nR was first released in 1993, with its stable version 1.0.0 coming out in 2000. It was inspired by the S programming language, developed by John Chambers at Bell Labs.\nR was created to provide a free, open-source platform for statisticians, data analysts, and researchers to perform statistical analysis, manipulate data, and create visualizations. Its purpose is to make it easier to apply complex statistical methods and work with large data sets.\n\nCode# Load the gt package\nlibrary(gt)\n\n# Create the data for the table\ncomparison &lt;- data.frame(\n  Feature = c(\"Primary Use\", \"Learning Curve\", \"Cost\", \"Community & Libraries\", \n              \"Data Visualization\", \"Speed & Efficiency\", \"Integration\", \"Scalability\"),\n  R = c(\"Statistical computing, data analysis, and visualization\",\n        \"Steep for beginners, especially for those unfamiliar with statistical concepts\",\n        \"Free and open source\", \n        \"Large, focused on statistics, 18,000+ packages\",\n        \"Excellent (with `ggplot2`, `plotly`, etc.)\",\n        \"Slower, memory-intensive\",\n        \"Excellent (interfaces with Python, C++, SQL)\",\n        \"Limited in enterprise or high-performance settings\"),\n  Python = c(\"General-purpose programming, data analysis, machine learning\",\n             \"Easier for beginners due to simpler syntax and versatility\",\n             \"Free (for basic use, with libraries)\",\n             \"Huge, versatile, with over 450,000 packages\",\n             \"Good (with `matplotlib`, `seaborn`, `plotly`)\",\n             \"Faster, more efficient for large datasets\",\n             \"Excellent (integrates with R, Java, C++)\",\n             \"Highly scalable, used widely in production environments\"),\n  SAS = c(\"Statistical analysis and business intelligence\",\n          \"Steep but well-supported for statistical analysis\",\n          \"Expensive commercial license\",\n          \"Specialized community, closed source\",\n          \"Limited compared to R\",\n          \"Fast, optimized for statistical procedures\",\n          \"Limited to SAS ecosystem\",\n          \"Well-suited for large-scale applications in business\"),\n  MATLAB = c(\"Numerical computing, engineering, and data analysis\",\n             \"Steep, especially for advanced mathematical operations\",\n             \"Expensive commercial license\",\n             \"Focused academic and engineering community\",\n             \"Good, though not as intuitive as R\",\n             \"Optimized for matrix operations but slower for general programming\",\n             \"Can integrate with Python, R, C++, but requires MATLAB-specific licenses\",\n             \"Can be scaled with MATLAB Parallel Server\")\n)\n\n# Generate the table using gt\ngt_table &lt;- gt(comparison, rowname_col = \"Feature\") %&gt;%\n  tab_header(\n    title = \"Comparison between R, Python, SAS, and MATLAB\"\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\") # Set the header text to bold\n    ),\n    locations = cells_column_labels(everything()) # Apply style to all column headers\n  ) %&gt;%\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\", color = \"blue\") # Set the row names text to bold\n    ),\n    locations = cells_stub() # Apply style to the row names (stub)\n  )\n\n# Render the table\ngt_table\n\n\n\n\n\n\n\nComparison between R, Python, SAS, and MATLAB\n    \n\n\n      R\n      Python\n      SAS\n      MATLAB\n    \n\n\n\nPrimary Use\nStatistical computing, data analysis, and visualization\nGeneral-purpose programming, data analysis, machine learning\nStatistical analysis and business intelligence\nNumerical computing, engineering, and data analysis\n\n\nLearning Curve\nSteep for beginners, especially for those unfamiliar with statistical concepts\nEasier for beginners due to simpler syntax and versatility\nSteep but well-supported for statistical analysis\nSteep, especially for advanced mathematical operations\n\n\nCost\nFree and open source\nFree (for basic use, with libraries)\nExpensive commercial license\nExpensive commercial license\n\n\nCommunity & Libraries\nLarge, focused on statistics, 18,000+ packages\nHuge, versatile, with over 450,000 packages\nSpecialized community, closed source\nFocused academic and engineering community\n\n\nData Visualization\nExcellent (with `ggplot2`, `plotly`, etc.)\nGood (with `matplotlib`, `seaborn`, `plotly`)\nLimited compared to R\nGood, though not as intuitive as R\n\n\nSpeed & Efficiency\nSlower, memory-intensive\nFaster, more efficient for large datasets\nFast, optimized for statistical procedures\nOptimized for matrix operations but slower for general programming\n\n\nIntegration\nExcellent (interfaces with Python, C++, SQL)\nExcellent (integrates with R, Java, C++)\nLimited to SAS ecosystem\nCan integrate with Python, R, C++, but requires MATLAB-specific licenses\n\n\nScalability\nLimited in enterprise or high-performance settings\nHighly scalable, used widely in production environments\nWell-suited for large-scale applications in business\nCan be scaled with MATLAB Parallel Server\n\n\n\n\n\n\nAdvantages of R\n\nOpen Source: R is free to use, modify, and distribute, which makes it accessible to everyone.\nComprehensive Statistical Packages: R has over 18,000 packages (available on CRAN) covering a wide range of statistical and machine learning techniques, making it a go-to tool for statisticians and data scientists.\nPowerful Data Visualization: R excels in data visualization with libraries like ggplot2, plotly, and shiny, allowing users to create high-quality plots and interactive web apps.\nActive Community: R has a large, supportive user community and strong contributions from statisticians and data scientists worldwide. The R user community regularly contributes new packages and offers extensive help through forums and mailing lists.\nCross-platform Compatibility: R works on various operating systems, including Windows, macOS, and Linux.\nIntegration with Other Languages: R can interface with other languages like Python, C++, and Java, making it more flexible in projects that require multiple programming environments.\nDisadvantages of R\n\nSlow Execution: R is an interpreted language, and sometimes it runs slower than compiled languages like C++ or Java, especially when handling large datasets or complex operations.\nSteep Learning Curve: R’s syntax and object-oriented structure can be difficult to master for beginners. Concepts like data frames, functions, and vectorization are key parts of the language, but not always intuitive to new users.\nMemory Usage: R processes all objects in-memory, which can be limiting when dealing with very large datasets. Unlike languages like Python or SQL, which can handle out-of-memory computations more efficiently, R struggles with memory optimization.\nPoor Scalability: R isn’t the best choice for production environments or enterprise applications due to its lack of scalability in handling massive, high-frequency data.\nLess User-Friendly for Some Tasks: Some tasks, especially general-purpose programming, can be cumbersome in R compared to more general languages like Python or JavaScript.\nComparison Highlights:\n\nR vs Python: Both are popular in data science, but Python is more versatile as a general-purpose language. R has an edge in statistical analysis and data visualization, while Python excels in machine learning and web development.\nR vs SAS: SAS is widely used in the corporate world for business intelligence and statistical analysis but is expensive. R is free and flexible but not as supported in large enterprise environments.\n\n-R vs MATLAB: MATLAB is more commonly used in engineering and numerical computing, whereas R is preferred for statistics. MATLAB is expensive, while R is free and open-source.\nSummary\nR is a powerful tool for statistical computing and visualization, with a vast ecosystem of packages tailored for data analysis and research. While it has some limitations in terms of speed, memory usage, and scalability, its extensive statistical functions and strong community make it a preferred choice in academic and research settings.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Statistics With R/tutorial2.html",
    "href": "Statistics With R/tutorial2.html",
    "title": "Tutorial 2",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "Statistics/tutorial2.html",
    "href": "Statistics/tutorial2.html",
    "title": "Tutorial 2",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "Statistics/Statistical_Distributions.html",
    "href": "Statistics/Statistical_Distributions.html",
    "title": "Statistical Distributions",
    "section": "",
    "text": "A statistical distribution is a mathematical function that defines how outcomes of an experimental trial occur randomly in a probable way (Schumacker 2017). In other words,a statistical distributions is like a map that shows us how data or outcomes are spread out. We can imagine it has a way to see all possible results of something happening and how likely each result is. A real-world example we can look at is students’ grades on a test. The grades often form a pattern like a bell shape (normal distribution), where most scores are around the average, with a few very high and low scores. A teacher may use this to understand overall performance and setting grading standards."
  },
  {
    "objectID": "statistics With R.html",
    "href": "statistics With R.html",
    "title": "Statistics With R",
    "section": "",
    "text": "Explore my tutorials on data science and programming:\n\nStatistical Distributions\nTutorial 2"
  },
  {
    "objectID": "Statistics/Statistical_Distributions.html#discrete-distributions",
    "href": "Statistics/Statistical_Distributions.html#discrete-distributions",
    "title": "Statistical Distributions",
    "section": "Discrete Distributions",
    "text": "Discrete Distributions\n\nBernoulli Distribution:\nBinomial Distribution: The binomial distribution is a probability distribution that describes the likelihood of a fixed number of “successes” in a fixed number of independent “trials” (or events), each with the same probability of success. It’s used widely in statistics to model situations with binary (yes/no, true/false, success/failure) outcomes.\n\n\nFormular:\nThe binomial distribution is a probability distribution that describes the likelihood of a fixed number of “successes” in a fixed number of independent “trials” (or events), each with the same probability of success. It’s used widely in statistics to model situations with binary (yes/no, true/false, success/failure) outcomes.\n\n\n1. Formula\nThe probability of getting exactly \\(\\textbf{k}\\) successes in \\(\\text{n}\\) independent trials, with probability of success \\(p\\), is given by:\n\\[\nP(X = k) = \\binom{n}{k} p^k (1 - p)^{n - k}\n\\]\nwhere: - $ P(X = k)$ is the probability of observing \\(k\\) successes, - \\(\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) is the binomial coefficient (also called “n choose k”), representing the number of ways to achieve \\(k\\) successes in \\(n\\) trials, - \\(p\\) is the probability of success in a single trial, - \\((1 - p)\\) is the probability of failure in a single trial, - \\((n)\\) is the total number of trials.\n\n\n2. Parameters of the Binomial Distribution\nThe binomial distribution is defined by two parameters: - ( n ) (number of trials): the fixed number of independent trials or experiments. - ( p ) (probability of success): the probability of a success in each individual trial.\n\n\n3. Real-World Applications of the Binomial Distribution\nThe binomial distribution is used in a variety of real-world scenarios where outcomes are binary. Here are some examples:\n\nQuality Control: Determining the probability of finding a certain number of defective products in a batch.\nSurvey Analysis: Estimating the probability that a certain number of people in a survey sample will agree or disagree with a statement.\nMedical Trials: Assessing the likelihood that a certain number of patients will experience a successful outcome (e.g., response to a treatment) in a clinical trial.\nFinance: Calculating the probability of achieving a specific number of wins or losses in a series of trades, where each trade is either a success or failure.\n\n\n\n4. Shape of a binomial distribution\nThe shape of the binomial distribution graph depends on the parameters \\((n)\\) and \\((p\\)): - Symmetry: When \\((p = 0.5)\\) and \\((n)\\) is large, the distribution is symmetrical. When \\((p)\\) differs from 0.5, it becomes skewed. - Skewness: For \\((p &lt; 0.5)\\), the distribution is skewed to the right. For \\((p &gt; 0.5)\\), it’s skewed to the left. - Peakedness: As \\((n)\\) increases, the distribution becomes more peaked and begins to resemble a normal distribution due to the Central Limit Theorem.\nFor a binomial distribution with different values of \\((p)\\), the graph looks like a series of bars (discrete distribution) indicating the probability of each possible number of successes from 0 up to \\((n)\\).\n\nGeometric Distribution: Counts the number of trials until the first success.\nNegative Binomial Distribution: Counts the number of trials until a specified number of successes occurs.\nPoisson Distribution: For the number of events in a fixed interval, given a constant rate of occurrence.\nMultinomial Distribution: Generalization of the binomial distribution for more than two outcomes.\nHypergeometric Distribution: For sampling without replacement, often used in quality control.\n\n\n\nContinuous Distributions\n\nNormal (Gaussian) Distribution: The “bell curve,” used widely in natural and social sciences.\nLog-Normal Distribution: Models a variable whose logarithm is normally distributed.\nUniform Distribution: All outcomes in a specified range are equally likely.\nExponential Distribution: Models the time between events in a Poisson process.\nGamma Distribution: Generalizes the exponential distribution, useful in queuing models.\nBeta Distribution: For variables constrained between 0 and 1, often used in Bayesian statistics.\nWeibull Distribution: Often used in reliability analysis and survival studies.\nPareto Distribution: For variables that follow a power-law distribution, useful in economics.\nCauchy Distribution: Has heavy tails, and mean/variance are undefined.\nChi-Square Distribution: Used in hypothesis testing, particularly in tests of independence.\n\n\n\nMultivariate Distributions\n\nMultivariate Normal Distribution: Generalization of the normal distribution to multiple variables.\nMultivariate T-Distribution: Similar to the multivariate normal but with heavier tails.\nWishart Distribution: A distribution over covariance matrices, useful in multivariate analysis.\nDirichlet Distribution: The multivariate generalization of the Beta distribution, often used in Bayesian models.\n\n\n\nOther Important Distributions\n\nStudent’s T-Distribution: Useful when sample sizes are small and population variance is unknown.\nF-Distribution: Used in analysis of variance (ANOVA).\nLaplace Distribution: Used for data with sharp peaks and heavy tails.\nRayleigh Distribution: Useful in signal processing, describing the distribution of magnitudes of a vector.\nLogistic Distribution: Similar to normal distribution but with heavier tails; used in logistic regression.\n\n\n\nMixture Distributions\n\nGaussian Mixture Model (GMM): Represents a mixture of multiple normal distributions, used in clustering.\nHidden Markov Models (HMMs): Used for sequential data where each state has its own distribution.\n\n\n\nSurvival and Reliability Distributions\n\nGumbel Distribution: Often used to model extreme values.\nFrechet Distribution: Another distribution used in extreme value theory.\nLog-Logistic Distribution: Used in survival analysis and reliability modeling."
  }
]